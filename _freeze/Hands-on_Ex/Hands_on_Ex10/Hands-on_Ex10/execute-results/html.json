{
  "hash": "ed6145a770e6a3c27dbe6a0ae04ec00f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex10\"\nauthor: \"Jeounghyun Kim\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **10  Visual Correlation Analysis**\n\n### **10.1 Overview**\n\n-   **Correlation coefficient** measures the type and strength of the relationship between two variables, ranging from -1.0 to 1.0.\n\n    -   **1.0**: Perfect positive linear relationship\n\n    -   **-1.0**: Perfect negative linear relationship\n\n    -   **0.0**: No linear relationship\n\n-   **Correlation matrix**: A table displaying correlation coefficients for multiple variable pairs in multivariate data.\n\n-   **Reasons for computing a correlation matrix**:\n\n    1.  To identify relationships between high-dimensional variables.\n\n    2.  To serve as input for analyses like factor analysis, structural equation models, and regression.\n\n    3.  To diagnose issues in analyses, such as multicollinearity in regression.\n\n-   **Corrgram for large datasets**:\n\n    -   Visualizes correlation values and their magnitude.\n\n    -   Reorders variables to group similar ones together, making patterns easier to interpret.\n\n-   **Hands-on exercise**:\n\n    1.  Creating a **correlation matrix** using `pairs()` in R Graphics.\n\n    2.  Plotting a **corrgram** with the `corrplot` package.\n\n    3.  Building an **interactive correlation matrix** with the `plotly` package.\n\n## **10.2 Installing and Launching R Packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## **10.3 Importing and Preparing The Data Set**\n\n-   **Dataset Used**: Wine Quality Data Set from the UCI Machine Learning Repository.\n\n-   **Data Details**:\n\n    -   13 variables\n\n    -   6,497 observations\n\n    -   Red wine and white wine data have been combined into one file.\n\n    -   The dataset is stored as a CSV file named wine_quality.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\n## **10.4 Building Correlation Matrix: *pairs()*method**\n\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the *pairs* function of R Graphics.\n\nBefore you continue to the next step, you should read the syntax description of [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html)function.\n\n### **10.4.1 Building a basic correlation matrix**\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n-   The `pairs()` function requires a matrix or data frame as input.\n\n-   It is used to create a scatterplot matrix with minimal code.\n\n-   In this exercise, columns 2 to 12 of the `wine` data frame are used.\n\n-   Selected variables:\n\n    -   Fixed acidity, volatile acidity, citric acid, residual sugar, chlorides,\n\n    -   Free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### **10.4.2 Drawing the lower corner**\n\n-   The `pairs()` function in R Graphics offers various customization options.\n\n-   Since a correlation matrix is symmetric, it is common to display only the upper or lower half.\n\n-   To show the lower half, the `upper.panel` argument is used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### **10.4.3 Including Correlation Coefficients Summary**\n\n-   Instead of a scatterplot, correlation coefficients can be displayed for each variable pair.\n\n-   The `panel.cor` function is used to achieve this.\n\n-   Higher correlations will be shown in larger font sizes for better visibility.\n\n-   No need to focus on the details—just run the code and explore the results visually.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## **10.5 Visualising Correlation Matrix: ggcormat()**\n\n-   A limitation of the traditional correlation matrix is that scatterplots become cluttered when there are more than 500 observations.\n\n-   To address this, the Corrgram visualization technique (Murdoch & Chow, 1996; Friendly, 2002) is used.\n\n-   Several R packages provide functions for plotting corrgrams, including:\n\n    -   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n    -   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n    -   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\n-   Additionally, the `ggstatsplot` package includes functions for building corrgrams.\n\n    In this section, you will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/index.html) package.\n\n### **10.5.1 The basic plot**\n\nOn of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability **to provide a comprehensive and yet professional statistical report** as shown in the figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2)function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n## **10.6 Building multiple plots**\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"ggstatsplot\")\nlibrary(ggstatsplot)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-12-1.png){width=1344}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n\n## **10.7 Visualising Correlation Matrix using corrplot Package**\n\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\n\nBefore getting started, you are required to read [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) in order to gain basic understanding of **corrplot**package.\n\n### **10.7.1 Getting started with corrplot**\n\nBefore we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\nBefore starts install.packages(\"corrplot\")\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"corrplot\")\nlibrary(corrplot)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n-   The default visual object for the corrgram is a circle.\n\n-   The layout is a symmetric matrix.\n\n-   Color scheme: Diverging blue-red\n\n    -   Blue: Represents positive correlation\n\n    -   Red: Represents negative correlation\n\n    -   Color intensity (saturation) indicates correlation strength:\n\n        -   Darker colors → Stronger correlation\n\n        -   Lighter colors → Weaker correlation\n\n### **10.7.2 Working with visual geometrics**\n\n-   The `corrplot` package supports seven visual geometrics (`method` parameter) for encoding correlation values:\n\n    -   Circle (default)\n\n    -   Square\n\n    -   Ellipse\n\n    -   Number\n\n    -   Shade\n\n    -   Color\n\n    -   Pie\n\n-   The **default** visual representation is a **circle**.\n\n-   This can be **changed** using the `method` argument in the function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### **10.7.3 Working with layout**\n\n*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nExplore other layout design arguments, such as `tl.pos`, `tl.cex`, `tl.offset`, `cl.pos`, `cl.cex`, and `cl.offset`, to customize the appearance further. Feel free to experiment with these settings to adjust text position, size, and offsets.\n\n### **10.7.4 Working with mixed layout**\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nThe `lower` and `upper` arguments define the visualization methods for different halves of the corrgram. In this case, ellipses represent the lower half, while numbers display the upper half. The `tl.pos` argument controls the axis label placement, and the `diag` argument determines the glyph used on the principal diagonal of the corrgram.\n\n### **10.7.5 Combining corrgram with the significant test**\n\n-   In statistical analysis, it is important to determine which correlation coefficients are statistically significant.\n\n-   A corrgram combined with a significance test helps identify significant correlations.\n\n-   Not all variable pairs have statistically significant correlations.\n\n-   Example:\n\n    -   The correlation between total sulfur dioxide and free sulfur dioxide is significant at the 0.1 level.\n\n    -   However, the correlation between total sulfur dioxide and citric acid is not significant.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nWith corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nWe can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n### **10.7.6 Reorder a corrgram**\n\n-   Matrix reordering is essential for uncovering hidden structures and patterns in a corrgram.\n\n-   By default, attributes in a corrgram follow the original order of the correlation matrix.\n\n-   This order can be changed using the `order` argument in `corrplot()`.\n\n-   `corrplot` supports four sorting methods:\n\n    1.  \"AOE\" – Angular Order of Eigenvectors.\n\n    2.  \"FPC\" – First Principal Component order.\n\n    3.  \"hclust\" – Hierarchical clustering order (customizable with `hclust.method`).\n\n        -   Methods: \"ward\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\".\n\n    4.  \"alphabet\" – Alphabetical order.\n\n-   Additional algorithms for reordering can be found in the **seriation** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n### **10.7.7 Reordering a correlation matrix using hclust**\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# **10 Reference**\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.\n\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 1108–180.\n\n## **10.1 R packages**\n\n-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n\n-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/index.html).\n\n-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\n\n-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n",
    "supporting": [
      "Hands-on_Ex10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}