{
  "hash": "82e98ce2a771c37a5e1bae1c23089c68",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex13\"\nauthor: \"Jeounghyun Kim\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **16  Treemap Visualisation with R**\n\n1.  **Data manipulation**: Transform transaction data into a treemap structure using `dplyr` functions.\n\n2.  **Static treemap**: Create a static treemap using the `treemap` package.\n\n3.  **Interactive treemap**: Design an interactive treemap using the `d3treeR` package.\n\n## **16.2 Installing and Launching R Packages**\n\nBefore we get started, you are required to check if **treemap** and **tidyverse** pacakges have been installed in you R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(treemap, treemapify, tidyverse) \n```\n:::\n\n\n\n## **16.3 Data Wrangling**\n\nIn this exercise, *REALIS2018.csv* data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n### **16.3.1 Importing the data set**\n\nIn the code chunk below, *read_csv()* of **readr** is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nThe output tibble data.frame is called *realis2018*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018 <- read_csv(\"data/realis2018.csv\")\n```\n:::\n\n\n\n### **16.3.2 Data Wrangling and Manipulation**\n\n-   The `realis2018` dataset is in a highly disaggregated transaction format, making it unsuitable for treemap visualization.\n\n-   Data transformation steps:\n\n    1.  Group transaction records by Project Name, Planning Region, Planning Area, Property Type, and Type of Sale.\n\n    2.  Compute summary statistics:\n\n        -   Total Unit Sold → Sum of `No. of Units`\n\n        -   Total Area → Sum of `Area (sqm)`\n\n        -   Median Unit Price → Median of `Unit Price ($ psm)`\n\n        -   Median Transacted Price → Median of `Transacted Price ($)`\n\n-   Key `dplyr` functions used:\n\n    -   `group_by()`: Groups data by specified variables.\n\n    -   `summarise()`: Computes summary statistics for each group.\n\n-   Effects of grouping on `dplyr` verbs:\n\n    -   `select()` retains grouping variables.\n\n    -   `arrange()` can order by groups if `.by_group = TRUE`.\n\n    -   `mutate()` and `filter()` work well with window functions (e.g., `rank()`, `min()`).\n\n    -   `sample_n()` and `sample_frac()` sample rows within groups.\n\n    -   `summarise()` generates aggregated results for each group.\n\n-   In this case: `group_by()` + `summarise()` are used to create a summarized dataset suitable for treemap visualization.\n\n::: callout-note\nStudents who are new to **dplyr** methods should consult [Introduction to dplyr](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html) before moving on to the next section.\n:::\n\n### **16.3.3 Grouped summaries without the Pipe**\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_grouped <- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised <- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n```\n:::\n\n\n\n::: callout-note\n-   Aggregation functions such as *sum()* and *meadian()* obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument *na.rm = TRUE* removes the missing values prior to computation.\n:::\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n### **16.3.4 Grouped summaries with the *pipe***\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the *pipe*, %\\>%:\n\n::: callout-note\nTo learn more about pipe, visit this excellent article: [Pipes in R Tutorial For Beginners](https://www.datacamp.com/community/tutorials/pipe-r-tutorial).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_summarised <- realis2018 %>% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %>%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n```\n:::\n\n\n\n## **16.4 Designing Treemap with treemap Package**\n\n**treemap** package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: *treemap()* offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n### **16.4.1 Designing a static treemap**\n\nIn this section, *treemap()* of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\n\nFirst, we will select records belongs to resale condominium property type from *realis2018_selected* data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_selected <- realis2018_summarised %>%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n```\n:::\n\n\n\n### **16.4.2 Using the basic arguments**\n\nThe code chunk below designed a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n-   **`index` (Hierarchy Definition)**\n\n    -   Must contain **at least two column names** to create a **hierarchical treemap**.\n\n    -   The **first column** represents the **highest aggregation level**, the **second column** the next level, and so on.\n\n-   **`vSize` (Rectangle Size Mapping)**\n\n    -   The selected column **determines the size** of each rectangle in the treemap.\n\n    -   **Values must be non-negative**, as negative values cannot be mapped to rectangle sizes.\n\n::: callout-warning\n-   The **current treemap is incorrectly colored**; the **rectangle colors should reflect different intensities** based on **median unit prices**.\n\n-   In `treemap()`, the **`vColor` argument** determines the **color mapping** of rectangles.\n\n-   The **`type` argument** controls how colors are assigned:\n\n    -   If `type` is **not defined**, `treemap()` defaults to `type = \"index\"`, coloring based on **hierarchy (e.g., planning areas)**.\n\n    -   To correctly represent **median unit prices**, `type` should be explicitly set to `\"value\"` or another suitable option.\n:::\n\n### **16.4.3 Working with *vColor* and *type* arguments**\n\nIn the code chunk below, *type* argument is define as value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nThinking to learn from the conde chunk above.\n\n-   The rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\n-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n### **16.4.4 Colours in treemap package**\n\n-   Two key arguments for color mapping:\n\n    1.  **`mapping`** – Defines how values are mapped to colors.\n\n    2.  **`palette`** – Specifies the color palette used.\n\n-   Difference between `\"value\"` and `\"manual\"` mapping:\n\n    -   `\"value\"` mapping:\n\n        -   Uses a diverging color palette (e.g., `\"RdYlBu\"` from ColorBrewer).\n\n        -   0 maps to the middle color (e.g., white/yellow).\n\n        -   Negative max values → Left-end color.\n\n        -   Positive max values → Right-end color.\n\n    -   `\"manual\"` mapping:\n\n        -   Min value → Left-end color.\n\n        -   Max value → Right-end color.\n\n        -   Mean value → Middle color.\n\n### **16.4.5 The “value” type treemap**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nThing to learn from the code chunk above:\n\n-   Although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\n\n-   The reason why we see only 5000 to 45000 in the legend is because the *range* argument is by default c(min(values, max(values)) with some pretty rounding.\n\n### **16.4.6 The “manual” type treemap**\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\nThe code chunk below shows a manual type treemap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   The colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative.\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### **16.4.7 Treemap Layout**\n\n**`treemap()` supports two layout algorithms**:\n\n1.  **`\"squarified\"`** (Bruls et al., 2000)\n\n    -   Produces **balanced aspect ratios** for rectangles.\n\n    -   **Ignores sorting order (`sortID`)**.\n\n2.  **`\"pivotSize\"`** (default, Bederson et al., 2002)\n\n    -   **Maintains sorting order (`sortID`)**.\n\n    -   Produces **acceptable aspect ratios** while preserving order.\n\n### **16.4.8 Working with *algorithm* argument**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### **16.4.9 Using *sortID***\n\nWhen “pivotSize” algorithm is used, *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex13_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}