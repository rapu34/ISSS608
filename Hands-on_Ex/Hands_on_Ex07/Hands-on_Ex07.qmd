---
title: "Hands-on_Ex07"
author: "Jeounghyun Kim"
date-modified: "last-modified" 
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# **7  Visualising Uncertainty**

## **7.1 Learning Outcome**

Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will be able:

-   to plot statistics error bars by using ggplot2,

-   to plot interactive error bars by combining ggplot2, plotly and DT,

-   to create advanced by using ggdist, and

-   to create hypothetical outcome plots (HOPs) by using ungeviz package.

## **7.2 Getting Started**

### **7.2.1 Installing and loading the packages**

For the purpose of this exercise, the following R packages will be used, they are:

-   tidyverse, a family of R packages for data science process,

-   plotly for creating interactive plot,

-   gganimate for creating animation plot,

-   DT for displaying interactive html table,

-   crosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and

-   ggdist for visualising distribution and uncertainty.

```{r}
pacman::p_load(plotly, crosstalk, DT, 
               ggdist, ggridges, colorspace,
               gganimate, tidyverse)
```

### **7.2.2 Data import**

```{r}
#| message: false
#| warning: false
exam <- read_csv("/Users/jay/ISSS608-VAA/Hands-on_Ex/Hands_on_Ex07/data/Exam_data.csv")
```

## **7.3 Visualizing the uncertainty of point estimates: ggplot2 methods**

-   **Point Estimate**\
    A point estimate refers to a single value, such as the mean. For example, it represents a calculated statistic like the mean or a specific value derived from a sample dataset.

-   **Uncertainty**\
    Uncertainty indicates how much confidence we can have in the point estimate. It is expressed through methods such as the **Standard Error (SE)**, **Confidence Interval (CI)**, or **Credible Interval**.

In this section, you will learn how to plot error bars of maths scores by race by using data provided in *exam* tibble data frame.

```{r}
#| message: false
#| warning: false
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

::: callout-tip
-   `group_by()` of **dplyr** package is used to group the observation by RACE,

-   `summarise()` is used to compute the count of observations, mean, standard deviation

-   `mutate()` is used to derive standard error of Maths by RACE, and

-   the output is save as a tibble data table called *my_sum*.
:::

Next, the code chunk below will be used to display *my_sum* tibble data frame in an html table format.

::: panel-tabset
## The Table

```{r}
#| echo: false
knitr::kable(head(my_sum), format = 'html')
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
knitr::kable(head(my_sum), format = 'html')
```
:::

### **7.3.1 Plotting standard error bars of point estimates**

Now we are ready to plot the standard error bars of mean maths score by race as shown below.

:::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```

::: callout-tip
-   The error bars are computed by using the formula mean+/-se.

-   For `geom_point()`, it is important to indicate *stat=“identity”*.
:::
::::

### **7.3.2 Plotting confidence interval of point estimates**

Instead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.

:::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```

::: callout-tip
-   The confidence intervals are computed by using the formula mean+/-1.96\*se.

-   The error bars is sorted by using the average maths scores.

-   `labs()` argument of ggplot2 is used to change the x-axis label.
:::
::::

### **7.3.3 Visualizing the uncertainty of point estimates with interactive error bars**

In this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure belo

::: panel-tabset
## The Plot

```{r}
#| echo: false
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::

## **7.4 Visualising Uncertainty: ggdist package**

`ggdist` is an R package designed to visualise distributions and uncertainty using a flexible set of ggplot2 geoms and statistics.

-   Key Features:

    -   Supports visualising uncertainty for both frequentist and Bayesian models.

    -   Unifies uncertainty visualisation through the lens of distribution-based visualisation.

-   Use Cases:

    -   Frequentist Models: Visualise confidence distributions or bootstrap distributions.

    -   Bayesian Models: Visualise probability distributions (works with the tidybayes package).

### **7.4.1 Visualizing the uncertainty of point estimates: ggdistmethods**

In the code chunk below, [`stat_pointinterval()`](https://mjskay.github.io/ggdist/reference/stat_pointinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

```{r}
#| echo: true
#| message: true
#| warning: true
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

::: callout-note
This function comes with many arguments, students are advised to read the syntax reference for more detail.
:::

For example, in the code chunk below the following arguments are used:

-   .width = 0.95

-   .point = median

-   .interval = qi

```{r}
#| echo: true
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")
```

### **7.4.2 Visualizing the uncertainty of point estimates: ggdistmethods**

Showing 95% and 99% confidence intervals.

```{r}
#| echo: true
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(
    .width = c(0.95, 0.99),
    .point = median,
    .interval = qi
  ) +
  labs(
    title = "Visualising 95% and 99% Confidence Intervals of Median Math Score",
    subtitle = "Median Point + Multiple-Interval Plot"
  )

```

```{r}
#| echo: true
#| message: false
#| warning: false
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval(
    show.legend = FALSE) +   
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

### **7.4.3 Visualizing the uncertainty of point estimates: ggdistmethods**

In the code chunk below, [`stat_gradientinterval()`](https://mjskay.github.io/ggdist/reference/stat_gradientinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "skyblue",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```

## **7.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**

### **7.5.1 Installing ungeviz package**

```{r}
devtools::install_github("wilkelab/ungeviz")
```

### **7.5.2 Launch the application in R**

```{r}
library(ungeviz)
```

### **7.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(data = exam, 
       (aes(x = factor(RACE), 
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, 
                             group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
ggplot(data = exam, 
       (aes(x = factor(RACE), 
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, 
                             group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```
:::
