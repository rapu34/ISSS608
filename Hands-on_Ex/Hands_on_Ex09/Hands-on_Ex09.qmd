---
title: "Hands-on_Ex09"
author: "Jeounghyun Kim"
date-modified: "last-modified" 
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# **13  Creating Ternary Plot with R**

### **13.1 Overview – Ternary Plots**

Ternary plots are used to visualize three-part compositional data, such as population structure (aged, economically active, young) or soil composition (sand, silt, clay). The plot is a triangular diagram where each side represents one component, and points are positioned based on their proportions.

This hands-on exercise focuses on creating ternary plots in R to analyze Singapore's population structure. The process consists of four steps:

1.  Install and launch **tidyverse** and **ggtern** packages.

2.  Use **mutate()** from dplyr to derive three new measures.

3.  Create a **static ternary plot** using **ggtern()**.

4.  Build an **interactive ternary plot** using **plot_ly()** from Plotly.

## **13.2 Installing and launching R packages**

This exercise uses two main R packages:

1.  **ggtern** – A ggplot extension for creating static ternary diagrams.

2.  **Plotly R** – A package for generating interactive web-based graphs using Plotly’s JavaScript library (*plotly.js*). It includes **ggplotly()**, which converts ggplot2 figures into interactive Plotly objects.

Additionally, selected **tidyverse** packages (**readr, dplyr, tidyr**) must be installed and loaded.

::: callout-important
Version **3.2.1 of ggplot2** will be installed instead of the latest version, as the current **ggtern** package is not compatible with the latest ggplot2 version.
:::

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

## **13.3 Data Preparation**

### **13.3.1 The data**

For the purpose of this hands-on exercise, the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called *respopagsex2000to2018_tidy.csv* and is in csv file format.

### **13.3.2 Importing Data**

To important *respopagsex2000to2018_tidy.csv* into R, ***read_csv()***function of **readr** package will be used.

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

### **13.3.3 Preparing the Data**

Next, use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old.

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## **13.4 Plotting Ternary Diagram with R**

### **13.4.1 4.1 Plotting a static ternary diagram**

Use ***ggtern()*** function of **ggtern** package to create a simple ternary plot.

```{r}
#| echo: true
#| message: false
#| warning: false
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()

```

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

### **13.4.2 Plotting an interative ternary diagram**

The code below create an interactive ternary plot using ***plot_ly()***function of **Plotly R**.

```{r}
#| echo: true
#| message: false
#| warning: false
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
