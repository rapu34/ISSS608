---
title: "Hands-on_Ex08"
author: "Jeounghyun Kim"
date-modified: "last-modified" 
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# **8  Funnel Plots for Fair Comparisons**

## **8.1 Overview**

A **funnel plot** is a specialised data visualisation tool for unbiased comparisons between outlets, stores, or business entities. In this exercise, you will learn to:

1.  Plot funnel plots using the **funnelPlotR** package.

2.  Create static funnel plots using the **ggplot2** package.

3.  Generate interactive funnel plots using **plotly R** and **ggplot2**.

## **8.2 Installing and Launching R Packages**

In this exercise, four R packages will be used. They are:

-   **readr** for importing csv into R.

-   **FunnelPlotR** for creating funnel plot.

-   **ggplot2** for creating funnel plot manually.

-   **knitr** for building static html table.

-   **plotly** for creating interactive funnel plot.

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

## **8.3 Importing Data**

In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.

```{r}
#| message: false
#| warning: false
library(dplyr)
library(tidyverse)

covid19 <- read_csv("/Users/jay/ISSS608-VAA/Hands-on_Ex/Hands_on_Ex08/data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

## **8.4 FunnelPlotR methods**

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), `denominator` (population to be considered) and `group`. The key arguments selected for customisation are:

-   `limit`: plot limits (95 or 99).

-   `label_outliers`: to label outliers (true or false).

-   `Poisson_limits`: to add Poisson limits to the plot.

-   `OD_adjust`: to add overdispersed limits to the plot.

-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function.

-   Other aesthetic components such as graph title, axis labels etc.

### **8.4.1 FunnelPlotR methods: The basic plot**

Before proceeding with 8.4.1 FunnelPlotR methods: The basic plot, you need to first install and load the FunnelPlotR package by running the following commands:

```{r}
#install.packages("FunnelPlotR")
library(FunnelPlotR)
```

::: panel-tabset
## The Plot

```{r}
#| echo: false
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```
:::

-   **`group`**

    -   In this function, `group` specifies the level of the points to be plotted (e.g., Sub-district, District, or City).

    -   If `City` is selected, only six data points will be plotted.

-   **`data_type`**

    -   The default value for the `data_type` argument is `"SR"`.

-   **`limit`**

    -   Specifies the plot limits.

    -   Accepted values are `95` (for 95% quantiles) or `99` (for 99.8% quantiles of the distribution).

### **8.4.2 FunnelPlotR methods: Makeover 1**

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| message: false
#| warning: false
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```
:::

```         
A funnel plot object with 267 points of which 7 are outliers. 
Plot is adjusted for overdispersion. 
```

Things to learn from the code chunk above.

-   `label = NA` argument is to removed the default label outliers feature.

-   `title` argument is used to add plot title.

-   `x_label` and `y_label` arguments are used to add/edit x-axis and y-axis titles.

### **8.4.3 FunnelPlotR methods: Makeover 2**

::: panel-tabset
## The Plot

```{r}
#| echo: false
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```

## The code chunk

```{r, echo=TRUE, eval=FALSE}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```
:::

```         
A funnel plot object with 267 points of which 7 are outliers. 
Plot is adjusted for overdispersion. 
```

Things to learn from the code chunk above.

-   `label = NA` argument is to removed the default label outliers feature.

-   `title` argument is used to add plot title.

-   `x_label` and `y_label` arguments are used to add/edit x-axis and y-axis titles.

## **8.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods**

This section provides a step-by-step guide to building funnel plots using **ggplot2**, aiming to enhance your skills in customising specialised data visualisations, such as funnel plots.

### **8.5.1 Computing the basic derived fields**

To plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, the *fit.mean* is computed by using the code chunk below.

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

### **8.5.2 Calculate lower and upper limits for 95% and 99.9% CI**

The code chunk below is used to compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

### **8.5.3 Plotting a static funnel plot**

In the code chunk below, ggplot2 functions are used to plot a static funnel plot.

```{r}
#| echo: true
#| message: false
#| warning: false
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

### **8.5.4 Interactive Funnel Plot: plotly + ggplot2**

The funnel plot created using ggplot2 functions can be made interactive with `ggplotly()`of **plotly** r package.

```{r}
#| echo: true
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

## **8.6 References**

-   [funnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/index.html) package.

-   [Funnel Plots for Indirectly-standardised ratios](https://nhs-r-community.github.io/FunnelPlotR/articles/funnel_plots.html).

-   [Changing funnel plot options](https://nhs-r-community.github.io/FunnelPlotR/articles/changing_funnel_plot_options.html)

-   [ggplot2](https://ggplot2.tidyverse.org/) package.
