---
title: "Hands-on_Ex10"
author: "Jeounghyun Kim"
date-modified: "last-modified" 
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# **6  Visual Correlation Analysis**

### **6.1 Overview**

-   **Correlation coefficient** measures the type and strength of the relationship between two variables, ranging from -1.0 to 1.0.

    -   **1.0**: Perfect positive linear relationship

    -   **-1.0**: Perfect negative linear relationship

    -   **0.0**: No linear relationship

-   **Correlation matrix**: A table displaying correlation coefficients for multiple variable pairs in multivariate data.

-   **Reasons for computing a correlation matrix**:

    1.  To identify relationships between high-dimensional variables.

    2.  To serve as input for analyses like factor analysis, structural equation models, and regression.

    3.  To diagnose issues in analyses, such as multicollinearity in regression.

-   **Corrgram for large datasets**:

    -   Visualizes correlation values and their magnitude.

    -   Reorders variables to group similar ones together, making patterns easier to interpret.

-   **Hands-on exercise**:

    1.  Creating a **correlation matrix** using `pairs()` in R Graphics.

    2.  Plotting a **corrgram** with the `corrplot` package.

    3.  Building an **interactive correlation matrix** with the `plotly` package.

## **6.2 Installing and Launching R Packages**

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

## **6.3 Importing and Preparing The Data Set**

-   **Dataset Used**: Wine Quality Data Set from the UCI Machine Learning Repository.

-   **Data Details**:

    -   13 variables

    -   6,497 observations

    -   Red wine and white wine data have been combined into one file.

    -   The dataset is stored as a CSV file named wine_quality.

```{r}
#| warning: false
wine <- read_csv("data/wine_quality.csv")
```

## **6.4 Building Correlation Matrix: *pairs()*method**

There are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the *pairs* function of R Graphics.

Before you continue to the next step, you should read the syntax description of [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html)function.

### **6.4.1 Building a basic correlation matrix**

Figure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.

```{r}
#| echo: true
#| message: false
#| warning: false
pairs(wine[,1:11])
```

-   The `pairs()` function requires a matrix or data frame as input.

-   It is used to create a scatterplot matrix with minimal code.

-   In this exercise, columns 2 to 12 of the `wine` data frame are used.

-   Selected variables:

    -   Fixed acidity, volatile acidity, citric acid, residual sugar, chlorides,

    -   Free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol.

```{r}
pairs(wine[,2:12])
```

### **6.4.2 Drawing the lower corner**

-   The `pairs()` function in R Graphics offers various customization options.

-   Since a correlation matrix is symmetric, it is common to display only the upper or lower half.

-   To show the lower half, the `upper.panel` argument is used.

```{r}
#| echo: true
pairs(wine[,2:12], upper.panel = NULL)
```

Similarly, you can display the upper half of the correlation matrix by using the code chun below.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

### **6.4.3 Including Correlation Coefficients Summary**

-   Instead of a scatterplot, correlation coefficients can be displayed for each variable pair.

-   The `panel.cor` function is used to achieve this.

-   Higher correlations will be shown in larger font sizes for better visibility.

-   No need to focus on the details—just run the code and explore the results visually.

```{r}
#| message: false
#| warning: false
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

## **6.5 Visualising Correlation Matrix: ggcormat()**

-   A limitation of the traditional correlation matrix is that scatterplots become cluttered when there are more than 500 observations.

-   To address this, the Corrgram visualization technique (Murdoch & Chow, 1996; Friendly, 2002) is used.

-   Several R packages provide functions for plotting corrgrams, including:

    -   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)

    -   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)

    -   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)

-   Additionally, the `ggstatsplot` package includes functions for building corrgrams.

    In this section, you will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/index.html) package.

### **6.5.1 The basic plot**

On of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability **to provide a comprehensive and yet professional statistical report** as shown in the figure below.

```{r}
#| message: false
#| warning: false
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
#| message: false
#| warning: false
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

Things to learn from the code chunk above:

-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.

-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2)function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.

The sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.

```{r}
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

## **6.6 Building multiple plots**

Since ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.

```{r}
#install.packages("ggstatsplot")
library(ggstatsplot)
```

```{r}
#| message: false
#| warning: false
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

Things to learn from the code chunk above:

-   to build a facet plot, the only argument needed is `grouping.var`.

-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.

-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.

## **6.7 Visualising Correlation Matrix using corrplot Package**

In this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.

Before getting started, you are required to read [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) in order to gain basic understanding of **corrplot**package.

### **6.7.1 Getting started with corrplot**

Before we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.

In the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.

Before starts install.packages("corrplot")

```{r}
#install.packages("corrplot")
library(corrplot)
```

```{r}
wine.cor <- cor(wine[, 1:11])
```

Next, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.

```{r}
corrplot(wine.cor)
```

-   The default visual object for the corrgram is a circle.

-   The layout is a symmetric matrix.

-   Color scheme: Diverging blue-red

    -   Blue: Represents positive correlation

    -   Red: Represents negative correlation

    -   Color intensity (saturation) indicates correlation strength:

        -   Darker colors → Stronger correlation

        -   Lighter colors → Weaker correlation

### **6.7.2 Working with visual geometrics**

-   The `corrplot` package supports seven visual geometrics (`method` parameter) for encoding correlation values:

    -   Circle (default)

    -   Square

    -   Ellipse

    -   Number

    -   Shade

    -   Color

    -   Pie

-   The **default** visual representation is a **circle**.

-   This can be **changed** using the `method` argument in the function.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot(wine.cor, 
         method = "ellipse") 
```

### **6.7.3 Working with layout**

*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

The default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

Explore other layout design arguments, such as `tl.pos`, `tl.cex`, `tl.offset`, `cl.pos`, `cl.cex`, and `cl.offset`, to customize the appearance further. Feel free to experiment with these settings to adjust text position, size, and offsets.

### **6.7.4 Working with mixed layout**

With **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.

Figure below shows a mixed layout corrgram plotted using wine quality data.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The code chunk used to plot the corrgram are shown below.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The `lower` and `upper` arguments define the visualization methods for different halves of the corrgram. In this case, ellipses represent the lower half, while numbers display the upper half. The `tl.pos` argument controls the axis label placement, and the `diag` argument determines the glyph used on the principal diagonal of the corrgram.

### **6.7.5 Combining corrgram with the significant test**

-   In statistical analysis, it is important to determine which correlation coefficients are statistically significant.

-   A corrgram combined with a significance test helps identify significant correlations.

-   Not all variable pairs have statistically significant correlations.

-   Example:

    -   The correlation between total sulfur dioxide and free sulfur dioxide is significant at the 0.1 level.

    -   However, the correlation between total sulfur dioxide and citric acid is not significant.

```{r}
#| echo: false
wine.sig = cor.mtest(wine.cor, conf.level= .95)
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

With corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.

```{r}
#| echo: true
#| message: false
#| warning: false
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

We can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

### **6.7.6 Reorder a corrgram**

-   Matrix reordering is essential for uncovering hidden structures and patterns in a corrgram.

-   By default, attributes in a corrgram follow the original order of the correlation matrix.

-   This order can be changed using the `order` argument in `corrplot()`.

-   `corrplot` supports four sorting methods:

    1.  "AOE" – Angular Order of Eigenvectors.

    2.  "FPC" – First Principal Component order.

    3.  "hclust" – Hierarchical clustering order (customizable with `hclust.method`).

        -   Methods: "ward", "single", "complete", "average", "mcquitty", "median", "centroid".

    4.  "alphabet" – Alphabetical order.

-   Additional algorithms for reordering can be found in the **seriation** package.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

### **6.7.7 Reordering a correlation matrix using hclust**

If using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
#| echo: true
#| message: false
#| warning: false
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

# **7 Reference**

Michael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.

D.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.

## **7.1 R packages**

-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package

-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/index.html).

-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.

-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.
